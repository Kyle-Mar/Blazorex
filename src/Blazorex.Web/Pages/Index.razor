@page "/"

<img @ref="_spritesheet" hidden src="blazor.png" />

<Canvas Width="_width" Height="_height" 
        OnFrameReady="(t) => OnFrameReady(t)"
        OnCanvasReady="(ctx) => OnCanvasReady(ctx)" />

@code
{
    ElementReference _spritesheet;
    IRenderContext _context;

    int _width = 800;
    int _height = 600;

    float _x = 400;
    float _y = 300;

    float _dx = 1;
    float _dy = 1;
    float _spriteSpeed = 0.25f;
    float _spriteMaxSpeed = 5f;

    int _spriteWidth = 200;
    int _spriteHeight = 200;

    float _lastUpdate = 0;
    float _elapsedTime = 0;

    int renderTarget;
    int rtWidth = 0;
    int rtHeight = 0;
    byte fireStartIntensity = 36;
    byte[] data;
    byte[] fireData;

    public record Color(byte r, byte g, byte b);

    Color[] palette = new Color[] {
        new Color(r:7, g:7, b:7), new Color(r:31,g:7,b:7),new Color(r:47,g:15,b:7),new Color(r:71,g:15,b:7),new Color(r:87,g:23,b:7),new Color(r:103,g:31,b:7),new Color(r:119,g:31,b:7),new Color(r:143,g:39,b:7),new Color(r:159,g:47,b:7),new Color(r:175,g:63,b:7),new Color(r:191,g:71,b:7),new Color(r:199,g:71,b:7),new Color(r:223,g:79,b:7),new Color(r:223,g:87,b:7),new Color(r:223,g:87,b:7),new Color(r:215,g:95,b:7),new Color(r:215,g:95,b:7),new Color(r:215,g:103,b:15),new Color(r:207,g:111,b:15),new Color(r:207,g:119,b:15),new Color(r:207,g:127,b:15),new Color(r:207,g:135,b:23),new Color(r:199,g:135,b:23),new Color(r:199,g:143,b:23),new Color(r:199,g:151,b:31),new Color(r:191,g:159,b:31),new Color(r:191,g:159,b:31),new Color(r:191,g:167,b:39),new Color(r:191,g:167,b:39),new Color(r:191,g:175,b:47),new Color(r:183,g:175,b:47),new Color(r:183,g:183,b:47),new Color(r:183,g:183,b:55),new Color(r:207,g:207,b:111),new Color(r:223,g:223,b:159),new Color(r:239,g:239,b:199),new Color(r:255,g:255,b:255)
    };

    private void OnCanvasReady(IRenderContext context)
    {
        _context = context;

        rtWidth = 300;
        rtHeight = 100;

        renderTarget = _context.CreateImageData(rtWidth, rtHeight);
        data = new byte[rtWidth * rtHeight * 4];
        fireData = new byte[rtWidth * rtHeight];
        for (int i = 0; i < fireData.Length; i++)
            fireData[i] = fireStartIntensity;
    }

    private void calculateFirePropagation()
    {
        for (int column = 0; column < rtWidth; column++)
        {
            for (int row = 0; row < rtHeight; row++)
            {
                int pixelIndex = column + (rtWidth * row);
                updateFireIntensityPerPixel(pixelIndex);
            }
        }
    }

    private void updateFireIntensityPerPixel(int currentPixelIndex)
    {
        int belowPixelIndex = currentPixelIndex + rtWidth;
        if (belowPixelIndex >= rtWidth * rtHeight)
            return;

        byte decay = (byte)(Math.Floor(Random.Shared.NextDouble() * 3));
        byte belowPixelFireIntensity = fireData[belowPixelIndex];
        byte newFireIntensity = Math.Max((byte)0, (byte)(belowPixelFireIntensity - decay));

        int fireDataIndex = currentPixelIndex - decay;
        fireData[fireDataIndex] = newFireIntensity;

        int colorIndex = fireDataIndex * 4;

        data[colorIndex] = (newFireIntensity >= palette.Length) ? (byte)255 : palette[newFireIntensity].r;
        data[colorIndex + 1] = (newFireIntensity >= palette.Length) ? (byte)255 : palette[newFireIntensity].g;
        data[colorIndex + 2] = (newFireIntensity >= palette.Length) ? (byte)255 : palette[newFireIntensity].b;
        data[colorIndex + 3] = 255;
    }

    private void Update(float timeStamp)
    {
        _elapsedTime = timeStamp - _lastUpdate;
        _lastUpdate = timeStamp;

        if (_x + _spriteWidth >= _width || _x < 0)
            _dx = -_dx;

        if (_y + _spriteHeight >= _height || _y < 0)
            _dy = -_dy;

        var speed = Math.Clamp(_spriteSpeed * _elapsedTime, 0, _spriteMaxSpeed);
        _x += _dx * speed;
        _y += _dy * speed;

        this.calculateFirePropagation();
    }

    private void Render()
    {
        // _context.ClearRect(0, 0, _width, _height);

        /*  _context.FillStyle = "green";
          _context.FillRect(0, 0, _width, _height);

          _context.StrokeStyle = "rgb(255, 255,0)";
          _context.LineWidth = 3;
          _context.StrokeRect(_x, _y, _spriteWidth, _spriteHeight);
          _context.DrawImage(_spritesheet, _x, _y, _spriteWidth, _spriteHeight);

          var fps = 1000f / _elapsedTime;
          _context.Font = "24px verdana";
          _context.FillStyle = "red";
          _context.FillText($"FPS: {fps:###}", 20, 40);*/

        _context.PutImageData(renderTarget, data, 10, 50);
    }

    private void OnFrameReady(float timeStamp)
    {
        this.Update(timeStamp);
        this.Render();
    }
}