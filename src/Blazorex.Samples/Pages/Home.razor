@page "/"

<PageTitle>Home</PageTitle>

<img @ref="_spritesheet" hidden src="blazor.png" />

<CanvasManager @ref="_canvasManager" />

@code
{
    CanvasManager _canvasManager;

    ElementReference _spritesheet;
    IRenderContext _context;

    int _width = 800;
    int _height = 600;

    float _x = 400;
    float _y = 300;

    Blazorex.MouseCoords _mousecoords;

    float _dx = 1;
    float _dy = 1;
    float _spriteSpeed = 0.25f;
    float _spriteMaxSpeed = 5f;

    int _spriteWidth = 200;
    int _spriteHeight = 200;

    float _lastUpdate = 0;
    float _elapsedTime = 0;

    private CanvasBase _fireCanvas;
    private Services.FireRenderer _fireRenderer;
    private int _fireWidth = 256;
    private int _fireHeight = 64;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        _canvasManager.CreateCanvas("fire", new CanvasCreationOptions()
        {
            Hidden = true,
            Width = _fireWidth,
            Height = _fireHeight,
            OnCanvasReady = this.OnFireCanvasReady,
            OnFrameReady = this.OnFireCanvasFrameReady,
        });
        _canvasManager.CreateCanvas("main", new CanvasCreationOptions()
        {
            Hidden = false,
            Width = _width,
            Height = _height,
            OnCanvasReady = this.OnMainCanvasReady,
            OnFrameReady = this.OnMainFrameReady,
            OnMouseMove = this.OnMainCanvasMouseMove,
            OnResize = this.OnMainCanvasResize,
        });
    }

    private void OnFireCanvasReady(CanvasBase canvas)
    {
        _fireCanvas = canvas;
        _fireRenderer = new Services.FireRenderer(canvas.RenderContext, _fireWidth, _fireHeight);
    }

    private void OnFireCanvasFrameReady(float timeStamp)
    {
        _fireRenderer.Update();
        _fireRenderer.Render();
    }

    private void OnMainCanvasReady(CanvasBase canvas)
    {
        _context = canvas.RenderContext;
    }

    private void OnMainFrameReady(float timestamp)
    {
        this.Update(timestamp);
        this.Render();
    }

    private void OnMainCanvasMouseMove(Blazorex.MouseCoords coords)
    {
        _mousecoords = coords;
    }

    private void OnMainCanvasResize(Size windowSize)
    {

    }

    private void Update(float timeStamp)
    {
        _elapsedTime = timeStamp - _lastUpdate;
        _lastUpdate = timeStamp;

        if (_x + _spriteWidth >= _width || _x < 0)
            _dx = -_dx;

        if (_y + _spriteHeight >= _height || _y < 0)
            _dy = -_dy;

        var speed = Math.Clamp(_spriteSpeed * _elapsedTime, 0, _spriteMaxSpeed);
        _x += _dx * speed;
        _y += _dy * speed;
    }

    private void Render()
    {
        _context.ClearRect(0, 0, _width, _height);

        _context.DrawImage(_fireCanvas.ElementReference, 0, 0, _width, _height);

        _context.StrokeStyle = "rgb(255, 255,0)";
        _context.LineWidth = 3;
        _context.StrokeRect(_x, _y, _spriteWidth, _spriteHeight);
        _context.DrawImage(_spritesheet, _x, _y, _spriteWidth, _spriteHeight);

        var fps = 1000f / _elapsedTime;
        _context.Font = "24px verdana";
        _context.FillStyle = "red";
        _context.FillText($"FPS: {fps:###}", 20, 40);
        _context.FillText($"Mouse Coords: {_mousecoords.X} : {_mousecoords.Y}", 20, 60);
    }
}